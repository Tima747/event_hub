#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø—É—Å–∫–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import jwt
import datetime
import argparse
from typing import Dict, Any

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
SECRET_KEY = "your-secret-key-for-event-hub-jwt-signing"

def create_token(user_id: str, role: str, expires_in_hours: int = 24) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é"""
    payload = {
        'user_id': user_id,
        'role': role,
        'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=expires_in_hours),
        'iat': datetime.datetime.utcnow(),
        'iss': 'event_hub'
    }
    
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

def create_expired_token(user_id: str, role: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω"""
    payload = {
        'user_id': user_id,
        'role': role,
        'exp': datetime.datetime.utcnow() - datetime.timedelta(hours=1),
        'iat': datetime.datetime.utcnow() - datetime.timedelta(hours=2),
        'iss': 'event_hub'
    }
    
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

def main():
    parser = argparse.ArgumentParser(description='–í—ã–ø—É—Å–∫ JWT —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--user-id', default='test_user', help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--role', choices=['reader', 'writer'], required=True, help='–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--expired', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω')
    parser.add_argument('--hours', type=int, default=24, help='–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ —á–∞—Å–∞—Ö')
    
    args = parser.parse_args()
    
    if args.expired:
        token = create_expired_token(args.user_id, args.role)
        print(f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è {args.role}:")
    else:
        token = create_token(args.user_id, args.role, args.hours)
        print(f"üü¢ –í–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è {args.role}:")
    
    print(f"Authorization: Bearer {token}")
    print(f"\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"curl -H 'Authorization: Bearer {token}' http://localhost:8000/api/events")

if __name__ == '__main__':
    main() 