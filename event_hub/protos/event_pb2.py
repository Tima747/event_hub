# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: event.proto
# Protobuf Python Version: 6.31.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    0,
    '',
    'event.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0b\x65vent.proto\x12\x05\x65vent\"V\n\x0c\x45ventRequest\x12\x0f\n\x07user_id\x18\x01 \x01(\t\x12\x12\n\nevent_type\x18\x02 \x01(\t\x12\x0e\n\x06\x61mount\x18\x03 \x01(\x01\x12\x11\n\ttimestamp\x18\x04 \x01(\t\"B\n\rEventResponse\x12\x10\n\x08\x65vent_id\x18\x01 \x01(\t\x12\x0e\n\x06status\x18\x02 \x01(\t\x12\x0f\n\x07message\x18\x03 \x01(\t\"\x1e\n\rStreamRequest\x12\r\n\x05limit\x18\x01 \x01(\x05\x32\x84\x01\n\x0c\x45ventService\x12\x36\n\tSendEvent\x12\x13.event.EventRequest\x1a\x14.event.EventResponse\x12<\n\x0cStreamEvents\x12\x14.event.StreamRequest\x1a\x14.event.EventResponse0\x01\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'event_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_EVENTREQUEST']._serialized_start=22
  _globals['_EVENTREQUEST']._serialized_end=108
  _globals['_EVENTRESPONSE']._serialized_start=110
  _globals['_EVENTRESPONSE']._serialized_end=176
  _globals['_STREAMREQUEST']._serialized_start=178
  _globals['_STREAMREQUEST']._serialized_end=208
  _globals['_EVENTSERVICE']._serialized_start=211
  _globals['_EVENTSERVICE']._serialized_end=343
# @@protoc_insertion_point(module_scope)
