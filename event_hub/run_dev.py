#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Event Hub –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""
import asyncio
import subprocess
import sys
import os
import signal
import time
from typing import List

class DevRunner:
    def __init__(self):
        self.processes: List[subprocess.Popen] = []
        self.running = True
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–∏—Å—ã...")
        self.running = False
        self.stop_all()
        sys.exit(0)
    
    def start_redis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Redis"""
        print("üî¥ –ó–∞–ø—É—Å–∫ Redis...")
        process = subprocess.Popen(
            ["docker", "run", "--rm", "-p", "6379:6379", "--name", "event-hub-redis", "redis:7"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        self.processes.append(process)
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è Redis –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        print("‚úÖ Redis –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 6379")
    
    def start_mongo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç MongoDB"""
        print("üü¢ –ó–∞–ø—É—Å–∫ MongoDB...")
        process = subprocess.Popen(
            ["docker", "run", "--rm", "-p", "27017:27017", "--name", "event-hub-mongo", "mongo:6"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        self.processes.append(process)
        time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è MongoDB –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        print("‚úÖ MongoDB –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 27017")
    
    def start_fastapi(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç FastAPI —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
        process = subprocess.Popen([
            sys.executable, "-m", "uvicorn", "app.main:app", 
            "--host", "0.0.0.0", "--port", "8000", "--reload"
        ])
        self.processes.append(process)
        print("‚úÖ FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    
    def start_grpc(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç gRPC —Å–µ—Ä–≤–µ—Ä"""
        print("üîß –ó–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞...")
        process = subprocess.Popen([
            sys.executable, "-m", "app.grpc.server"
        ])
        self.processes.append(process)
        print("‚úÖ gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 50051")
    
    def start_consumer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç consumer –º–µ—Ç—Ä–∏–∫"""
        print("üìä –ó–∞–ø—É—Å–∫ consumer –º–µ—Ç—Ä–∏–∫...")
        process = subprocess.Popen([
            sys.executable, "-m", "consumer.metrics_consumer"
        ])
        self.processes.append(process)
        print("‚úÖ Consumer –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def generate_protos(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç protobuf —Ñ–∞–π–ª—ã"""
        print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è protobuf —Ñ–∞–π–ª–æ–≤...")
        try:
            subprocess.run([sys.executable, "generate_protos.py"], check=True)
            print("‚úÖ Protobuf —Ñ–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ protobuf: {e}")
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        try:
            subprocess.run(["docker", "stop", "event-hub-redis"], check=False)
            subprocess.run(["docker", "stop", "event-hub-mongo"], check=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üéØ Event Hub - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("=" * 50)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º protobuf —Ñ–∞–π–ª—ã
            self.generate_protos()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            self.start_redis()
            self.start_mongo()
            
            # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.start_fastapi()
            time.sleep(1)
            self.start_grpc()
            time.sleep(1)
            self.start_consumer()
            
            print("\nüéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
            print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
            print("   ‚Ä¢ FastAPI + GraphQL: http://localhost:8000")
            print("   ‚Ä¢ GraphQL Playground: http://localhost:8000/graphql")
            print("   ‚Ä¢ API Docs: http://localhost:8000/docs")
            print("   ‚Ä¢ gRPC: localhost:50051")
            print("   ‚Ä¢ MongoDB: localhost:27017")
            print("   ‚Ä¢ Redis: localhost:6379")
            print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.stop_all()

if __name__ == "__main__":
    runner = DevRunner()
    runner.run() 